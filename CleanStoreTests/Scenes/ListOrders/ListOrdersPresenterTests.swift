//
//  ListOrdersPresenterTests.swift
//  CleanStore
//
//  Created by Carlos Cortés Sánchez on 12/09/2017.
//  Copyright (c) 2017 Carlos Cortés Sánchez. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CleanStore
import XCTest

class ListOrdersPresenterTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ListOrdersPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupListOrdersPresenter()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupListOrdersPresenter()
    {
        sut = ListOrdersPresenter()
    }
    
    // MARK: Test doubles
    
    class ListOrdersDisplayLogicSpy: ListOrdersDisplayLogic
    {
        var displayFetchedOrdersCalled = false
        
        var viewModel: ListOrders.FetchOrders.ViewModel!
        
        func displayFetchedOrders(viewModel: ListOrders.FetchOrders.ViewModel) {

            displayFetchedOrdersCalled = true
            self.viewModel = viewModel
        }
        
    }
    
    // MARK: Tests
    
    func testPresentFetchedOrdersShouldFormatFetchedOrdersForDisplay()
    {
        // Given
        let listOrdersDisplayLogicSpy = ListOrdersDisplayLogicSpy()
        sut.viewController = listOrdersDisplayLogicSpy
        
        var dateComponents = DateComponents()
        dateComponents.year = 2007
        dateComponents.month = 6
        dateComponents.day = 29
        let date = Calendar.current.date(from: dateComponents)!
        
        let orders = [Order(firstName: "Amy", lastName: "Apple", email: "amy.apple@clean-swift.com", id: "abc123", date: date, total: NSDecimalNumber(string: "1.23"))]
        let response = ListOrders.FetchOrders.Response(orders: orders)
        
        // When
        sut.presentFetchedOrders(response: response)
        
        // Then
        let displayedOrders = listOrdersDisplayLogicSpy.viewModel.displayedOrders
        for displayedOrder in displayedOrders {
            XCTAssertEqual(displayedOrder.id, "abc123", "Presenting fetched orders should properly format order ID")
            XCTAssertEqual(displayedOrder.date, "6/29/07", "Presenting fetched orders should properly format order date")
            XCTAssertEqual(displayedOrder.email, "amy.apple@clean-swift.com", "Presenting fetched orders should properly format email")
            XCTAssertEqual(displayedOrder.name, "Amy Apple", "Presenting fetched orders should properly format name")
            XCTAssertEqual(displayedOrder.total, "$1.23", "Presenting fetched orders should properly format total")
        }
    }
    
    func testPresentFetchedOrdersShouldAskViewControllerToDisplayFetchedOrders() {
        // Given
        let listOrdersDisplayLogicSpy = ListOrdersDisplayLogicSpy()
        sut.viewController = listOrdersDisplayLogicSpy
        
        // When
        let orders = [Order(firstName: "Amy", lastName: "Apple", email: "amy.apple@clean-swift.com", id: "abc123", date: Date(), total: NSDecimalNumber(string: "1.23"))]
        let response = ListOrders.FetchOrders.Response(orders: orders)
        
        // Then
        sut.presentFetchedOrders(response: response)
        XCTAssert(listOrdersDisplayLogicSpy.displayFetchedOrdersCalled, "Presenting fetched orders should ask view controller to display them")
    }
}
